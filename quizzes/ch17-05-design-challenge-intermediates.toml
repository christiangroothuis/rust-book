[multipart]
q = """
**Context:** You are designing a serialization library that converts Rust data types into formats like JSON.

**Functionality:** A `Serialize` trait that can be implemented by serializable types, and a `to_json` function that converts serializable types into JSON.

**Designs:** Below are several proposed designs to implement the functionality.

```
// Option 1: types serialize to a `Value` enum
pub enum Value {
	String(String),
	Number(isize)
}

pub trait Serialize {
	fn serialize(&self) -> Value;
}

fn value_to_json(value: Value) -> String {
	/* .. */
}

pub fn to_json(data: impl Serialize) -> String {
    let value = data.serialize();
    value_to_json(value)
}


// Option 2: types serialize via calls to a `Serializer` interface
pub trait Serialize {
	fn serialize<S: Serializer>(&self, serializer: &mut S);
}

pub trait Serializer {
	fn serialize_string(&mut self, s: &str);
	fn serialize_number(&mut self, n: isize);
}

struct JsonSerializer { buffer: String };
impl Serializer for JsonSerializer {
	/* .. */
}

pub fn to_json(data: impl Serialize) -> String {
	let mut serializer = JsonSerializer { buffer: String::new() };
	data.serialize(&mut serializer);
	serializer.buffer
}
```
"""

[[questions]]
type = "MultipleChoice"
multipart = "q"
prompt.prompt = """
Select each design option that satisfies the following requirement:

**Requirement:** It should be possible to add a new data format without needing to modify code in existing implementations of the `Serialize` trait.
"""
prompt.distractors = []
prompt.sortAnswers = true
answer.answer = ["1", "2"]
context = """
Both designs are sufficiently decoupled such that each new data format is independent of any `Serialize` implementations. For Option 1,
each data format converts a `Value` into the format's representation. `Value` acts as a module boundary.

For Option 2, there is no explicit intermediate representation of a serialized value, but rather each `Serialize` implementation is explicitly generic
over any choice of `S` that implements `Serializer`.
"""
id = "66e036c9-91a0-4611-8110-967b5ed1a514"

[[questions]]
type = "MultipleChoice"
multipart = "q"
prompt.prompt = """
Select each design option that satisfies the following requirement:

**Requirement:** The process of serialization should consume as little memory as possible.
"""
prompt.distractors = ["1"]
prompt.sortAnswers = true
answer.answer = ["2"]
context = """
Option 1 serializes data by first converting a data structure into an intermediate representation, `Value`, and then converting `Value` into the final format.
This intermediate data structure consumes memory which is not needed by Option 2, where data is converted directly into the final format.
"""
id = "eaa95520-1b72-4f7d-a600-5444b6368785"


[[questions]]
multipart = "q"
type = "MultipleChoice"
prompt.prompt = """
Select each design option that satisfies the following requirement:

**Requirement:** When the same data type is serialized into multiple formats, that should increase the size of the compiled binary as little as possible.
"""
prompt.distractors = ["2"]
prompt.sortAnswers = true
answer.answer = ["1"]
context = """
With Option 1, there is only a single instantiation of `Serialize` that converts a type `T` into a `Value`. Because Option 2 is generic over serializers `S`,
then every time `T::serialize` is called with a new `S`, the Rust compiler will monomorphize a new instance of `T::serialize` which would increase the size of
the binary by comparison to Option 1.
"""
id = "2751731e-7d18-46a1-aaea-b5734bf51c80"
